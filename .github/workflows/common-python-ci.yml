name: Python-CI

on:
  workflow_call:
    inputs:
      python_version:
        type: string
        description: "Python version to use (auto-detected from pyproject.toml if present)"
        required: false
        default: ""

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  notify_requirements:
    uses: ./.github/workflows/post-usage.yml
    secrets: inherit

  start-pipeline:
    needs: [notify_requirements]
    # Only start if the run pipeline was posted by a collaborator
    if: ${{ github.event.issue.pull_request && (github.event.comment.body == '/run pipeline' || github.event.comment.body == '/run pipeline ') }}
    uses: ./.github/workflows/get-latest-pr-details.yml
    with:
      github_token: ${{ github.token }}

  set-commit-status-ci-running:
    uses: ./.github/workflows/set-commit-status.yml
    needs: [ start-pipeline ]
    with:
      github_token: ${{ github.token }}
      state: "pending"
      description: "Running"
      context: "CI Pipeline"
      sha: ${{ needs.start-pipeline.outputs.commit_id }}
      target_url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      github_repository: ${{ github.repository }}

  detect-python-version:
    needs: [ start-pipeline ]
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.detect.outputs.python-version }}
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.GH_TOKEN }}
          ref: ${{ needs.start-pipeline.outputs.commit_id }}

      - name: Detect Python version
        id: detect
        run: |
          # Use provided version if available
          if [ -n "${{ inputs.python_version }}" ]; then
            echo "python-version=${{ inputs.python_version }}" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Auto-detect from pyproject.toml
          if [ -f "pyproject.toml" ]; then
            # Look for requires-python line and extract version
            REQUIRES_LINE=$(grep -i "requires-python" pyproject.toml 2>/dev/null || echo "")

            if [ -n "$REQUIRES_LINE" ]; then
              # Extract version number from patterns like >=3.9, >=3.10, etc.
              DETECTED_VERSION=$(echo "$REQUIRES_LINE" | grep -oE '[0-9]+\.[0-9]+' | head -1)

              if [ -n "$DETECTED_VERSION" ]; then
                echo "python-version=$DETECTED_VERSION" >> $GITHUB_OUTPUT
              else
                echo "python-version=3.11" >> $GITHUB_OUTPUT
              fi
            else
              echo "python-version=3.11" >> $GITHUB_OUTPUT
            fi
          else
            echo "python-version=3.11" >> $GITHUB_OUTPUT
          fi

  python_ci:
    needs: [ start-pipeline, detect-python-version ]
    runs-on: ubuntu-latest
    container:
      image: icr.io/goldeneye_images/goldeneye-ci-image:stable
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.GH_TOKEN }}
          submodules: true
          # Clone all branches and history
          fetch-depth: 0
          ref: ${{ needs.start-pipeline.outputs.commit_id }}

      # Workaround for https://github.com/actions/runner/issues/2033
      - name: Set ownership
        run: |
          chown -R $(id -u):$(id -g) $PWD
          git config --global --add safe.directory $(pwd)

      # Set up Python
      - name: Set up Python ${{ needs.detect-python-version.outputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.detect-python-version.outputs.python-version }}

      # Install dependencies and run tests
      - name: Install dependencies and run tests
        run: |
          # Check if this is a modern Python project with uv support
          if [ -f "pyproject.toml" ] && grep -q "uv" pyproject.toml 2>/dev/null; then
            echo "Modern Python project with uv detected"

            # Install uv if not already available
            if ! command -v uv &> /dev/null; then
              curl -LsSf https://astral.sh/uv/install.sh | sh
              export PATH="$HOME/.local/bin:$PATH"
            fi

            # Sync dependencies from pyproject.toml
            uv sync --dev

            # Run linting
            echo "Running ruff checks..."
            uv run ruff check . || echo "Ruff check completed with issues"
            uv run ruff format --check . || echo "Ruff format check completed with issues"

            # Run tests
            echo "Running tests..."
            uv run pytest --cov --cov-report=xml --cov-report=term-missing

          else
            echo "Traditional Python project detected"

            # Upgrade pip first
            python -m pip install --upgrade pip

            # Install project dependencies
            if [ -f "pyproject.toml" ]; then
              # Modern Python project with pyproject.toml but no uv
              pip install -e ".[dev]" || pip install -e .
            elif [ -f "requirements.txt" ]; then
              # Traditional project with requirements.txt
              pip install -r requirements.txt
            fi

            # Install dev dependencies if available
            if [ -f "requirements-dev.txt" ]; then
              pip install -r requirements-dev.txt
            fi

            # Install test dependencies
            pip install pytest pytest-cov

            # Install ruff for linting
            pip install ruff

            # Run linting
            echo "Running ruff checks..."
            ruff check . || echo "Ruff check completed with issues"
            ruff format --check . || echo "Ruff format check completed with issues"

            # Run tests
            echo "Running tests..."
            pytest --cov --cov-report=xml --cov-report=term-missing
          fi

  set-commit-status-ci-success:
    needs: [ start-pipeline, python_ci ]
    if: ${{ success() }}
    uses: ./.github/workflows/set-commit-status.yml
    with:
      github_token: ${{ github.token }}
      state: "success"
      description: "Complete - Success"
      context: "CI Pipeline"
      sha: ${{ needs.start-pipeline.outputs.commit_id }}
      target_url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      github_repository: ${{ github.repository }}

  set-commit-status-ci-failure:
    needs: [ start-pipeline, python_ci ]
    if: ${{ failure() }}
    uses: ./.github/workflows/set-commit-status.yml
    with:
      github_token: ${{ github.token }}
      state: "failure"
      description: "Complete - Failure"
      context: "CI Pipeline"
      sha: ${{ needs.start-pipeline.outputs.commit_id }}
      target_url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      github_repository: ${{ github.repository }}
