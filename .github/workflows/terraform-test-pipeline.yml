# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      checkout_commit:
        description: Commit ID you want to checkout
        type: string
        required: true
      craConfigYamlFile:
        type: string
        description: "A YAML config file containing the configuration for CRA V2. If values are missing it will try to use the other inputs as default"
        required: false
      craTarget:
        type: string
        description: "Target directory for CRA scan(accepts comma seperated list for multiple scans). If not provided CRA Scan will not be run"
        required: false
        default: ""
      craGoalIgnoreFile:
        type: string
        description: "CRA Ignore file to use(Used for SCC v1). If not provided checks repo root directory for cra-tf-validate-ignore-goals.json"
        required: false
        default: "cra-tf-validate-ignore-goals.json"
      craRuleIgnoreFile:
        type: string
        description: "CRA Ignore file to use (Used for SCC v2). If not provided checks repo root directory for cra-tf-validate-ignore-rules.json"
        required: false
        default: "cra-tf-validate-ignore-rules.json"
      craSCCv2:
        type: boolean
        description: "Use SCCv2 CRA run-cra-scc-v2.sh"
        required: false
        default: false
      accountID:
        type: string
        description: "CRA scc v2 needs the IBM Cloud Account ID as Input (Default GeDev)"
        required: false
        default: "abac0df06b644a9cabc6e44f55b3880e"
      profileID:
        type: string
        description: "CRA scc v2 needs the Pofile ID as Input. This is the profile ID you want to scan with. Note IDs are region specific ensure you use a US one (Default: US IBM Cloud for Financial Services 1.2.0)"
        required: false
        default: "4c67f813-8723-4029-8b44-848fb989899e"
      craEnvironmentVariables:
        type: string
        description: "An optional list of environment variables to set for CRA, in comma seperated format 'VAR1=value1,VAR2=value2'. This can be used to provide TF_VAR's"
        required: false
        default: ""
      GITHUB_BASE_REF:
        description: target branch merging into
        type: string
        required: true
      GITHUB_HEAD_REF:
        description: source branch coming from
        type: string
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Infrastructure_Tests:
    name: Infrastructure Test
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    container:
      image: icr.io/goldeneye_images/goldeneye-ci-image:stable
      env:
        TF_VAR_ibmcloud_api_key: ${{ secrets.IBMCLOUD_API_KEY }}
        IC_API_KEY: ${{ secrets.IBMCLOUD_API_KEY }}
        TOOLCHAIN_ID: ${{ secrets.IAC_GE_OPS_TOOLCHAIN_ID }}
        MZ_INGESTION_KEY: ${{ secrets.MZ_INGESTION_KEY }}
        TF_VAR_ibmcloud_api_key_ext: ${{ secrets.IBMCLOUD_API_KEY_GEStaging }}
        PROFILE_ID: ${{ inputs.profileID }}
        ACCOUNT_ID: ${{ inputs.accountID }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
          submodules: true
          ref: ${{ inputs.checkout_commit }}
          # Clone all branches and history. This is needed for the upgrade tests
          fetch-depth: 0

      # Workaround for https://github.com/actions/runner/issues/2033
      - name: Set ownership
        run: |
          chown -R $(id -u):$(id -g) $PWD

      # Install dependencies
      - name: Install dependencies
        run: |
          make dependency-install-darwin-linux

      # run CRA scan
      - name: CRA Scan
        if: inputs.craTarget != '' || inputs.craConfigYamlFile != ''
        run: |
          #!/bin/bash
          set -e
          DEFAULT_ACCOUNT_ID="$ACCOUNT_ID"
          DEFAULT_PROFILE_ID="$PROFILE_ID"
          # Check if YAML file is provided
          if [[ -n "${{ inputs.craConfigYamlFile }}" ]]; then
            if [[ -f "${{ inputs.craConfigYamlFile }}" ]]; then
              # Parse the YAML file and process each target
              length=$(yq e '.CRA_TARGETS | length' "${{ inputs.craConfigYamlFile }}")
              for ((i=0; i<length; i++)); do
                CRA_TARGET=$(yq e ".CRA_TARGETS[$i].CRA_TARGET | select (.!=null)" "${{ inputs.craConfigYamlFile }}" || echo "${{ inputs.craTarget }}")
                if [[ -z "$CRA_TARGET" ]]; then
                  CRA_TARGET="${{ inputs.craTarget }}"
                  if [[ -z "$CRA_TARGET" ]]; then
                    echo "Error: No CRA_TARGET specified in the YAML config or as an environment variable."
                    exit 1
                  else
                    echo "CRA_TARGET ${CRA_TARGET} set from environment variable"
                  fi
                else
                  echo "CRA_TARGET ${CRA_TARGET} set from config file ${{ inputs.craConfigYamlFile }}"
                fi

                CRA_RULE_IGNORE_FILE=$(yq e ".CRA_TARGETS[$i].CRA_RULE_IGNORE_FILE | select (.!=null)" "${{ inputs.craConfigYamlFile }}")

                ACCOUNT_ID=$(yq e ".CRA_TARGETS[$i].ACCOUNT_ID | select (.!=null)" "${{ inputs.craConfigYamlFile }}")
                if [[ -z "$ACCOUNT_ID" ]]; then
                  ACCOUNT_ID="${DEFAULT_ACCOUNT_ID}"
                  if [[ -z "$ACCOUNT_ID" ]]; then
                    echo "Error: No ACCOUNT_ID specified in the YAML config or as an environment variable."
                    exit 1
                  else
                    echo "ACCOUNT_ID ${ACCOUNT_ID} set from environment variable"
                  fi
                else
                  echo "ACCOUNT_ID ${ACCOUNT_ID} set from config file ${{ inputs.craConfigYamlFile }}"
                fi

                PROFILE_ID=$(yq e ".CRA_TARGETS[$i].PROFILE_ID | select (.!=null)" "${{ inputs.craConfigYamlFile }}")
                if [[ -z "$PROFILE_ID" ]]; then
                  PROFILE_ID="${DEFAULT_PROFILE_ID}"
                  if [[ -z "$PROFILE_ID" ]]; then
                    echo "Error: No PROFILE_ID specified in the YAML config or as an environment variable."
                    exit 1
                  else
                    echo "PROFILE_ID ${PROFILE_ID} set from environment variable"
                  fi
                else
                  echo "PROFILE_ID ${PROFILE_ID} set from config file ${{ inputs.craConfigYamlFile }}"
                fi

                # Extract environment variables from YAML and export them
                env_vars_length=$(yq e ".CRA_TARGETS[$i].CRA_ENVIRONMENT_VARIABLES | length" "${{ inputs.craConfigYamlFile }}")
                if [[ "$env_vars_length" == "0" ]]; then
                    echo "No environment variables to export for target ${CRA_TARGET}"
                else
                  for ((j=0; j<env_vars_length; j++)); do
                    env_var_key=$(yq e ".CRA_TARGETS[$i].CRA_ENVIRONMENT_VARIABLES[$j] | path | .[0]" "${{ inputs.craConfigYamlFile }}")
                    env_var_value=$(yq e ".CRA_TARGETS[$i].CRA_ENVIRONMENT_VARIABLES[$j].$env_var_key" "${{ inputs.craConfigYamlFile }}")
                    echo "Exporting environment variable: ${env_var_key}"
                    export "${env_var_key}"="${env_var_value}"
                  done
                fi


                # Run CRA scan for the target
                if [[ -n "${CRA_TARGET}" ]]; then
                  echo "CRA IGNORE FILE: ${CRA_RULE_IGNORE_FILE}"
                  ci/run-cra-scc-v2.sh "$CRA_TARGET"
                else
                  echo "No CRA target specified for this configuration!"
                fi
              done

              # Unset the variables
              if [[ "$env_vars_length" == "0" ]]; then
                  echo "No environment variables to unset"
              else
                for ((j=0; j<env_vars_length; j++)); do
                  env_var_key=$(yq e ".CRA_TARGETS[$i].CRA_ENVIRONMENT_VARIABLES[$j] | path | .[0]" "${{ inputs.craConfigYamlFile }}")
                  echo "Unsetting environment variable: ${env_var_key}"
                  unset "${env_var_key}"
                done
              fi
            else
              echo "Provided YAML configuration file '${{ inputs.craConfigYamlFile }}' not found!"
              exit 1
            fi
          else
            export CRA_IGNORE_GOALS_FILE="$(pwd)/${{ inputs.craGoalIgnoreFile }}"
            export CRA_IGNORE_RULES_FILE="$(pwd)/${{ inputs.craRuleIgnoreFile }}"

            ENV_VARS="${{ inputs.craEnvironmentVariables }}"
            if [[ -n "$ENV_VARS" ]]; then
              IFS=',' read -ra ENV_VARS_ARRAY <<< "$ENV_VARS"
              for i in "${ENV_VARS_ARRAY[@]}"; do
                # Use an array to store the variable and value
                ENV_VAR=(${i//=/ })
                echo "Exporting environment variable: ${ENV_VAR[0]}"
                export "${ENV_VAR[0]}"="${ENV_VAR[1]}"
              done
            else
              echo "No input environment variables to export"
            fi

            # Install CRA plugin if not detected
            if ! ibmcloud plugin show cra; then
              ibmcloud plugin install cra -f
            fi

            # Run CRA scan for each target in the comma-separated list
            IFS=',' read -ra CRA_TARGETS_ARRAY <<< "${{ inputs.craTarget }}"
            for target in "${CRA_TARGETS_ARRAY[@]}"; do
              if ${{ inputs.craSCCv2 }}; then
                echo "CRA IGNORE FILE: ${CRA_IGNORE_RULES_FILE}"
                ci/run-cra-scc-v2.sh "$target"
              else
                echo "CRA IGNORE FILE: ${CRA_IGNORE_GOALS_FILE}"
                ci/run-cra.sh "$target"
              fi
            done
          fi



# run unit tests
      - name: Unit Tests
        run: |
          export GITHUB_BASE_REF=${{inputs.GITHUB_BASE_REF}}
          export GITHUB_HEAD_REF=${{inputs.GITHUB_HEAD_REF}}
          make run-tests
