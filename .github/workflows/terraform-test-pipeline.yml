# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      checkout_commit:
        description: Commit ID you want to checkout
        type: string
        required: true
      craConfigYamlFile:
        type: string
        description: "A YAML config file containing the configuration for CRA V2. If values are missing it will try to use the other inputs as default"
        required: false
      craTarget:
        type: string
        description: "Target directory for CRA scan(accepts comma seperated list for multiple scans). If not provided CRA Scan will not be run"
        required: false
        default: ""
      craGoalIgnoreFile:
        type: string
        description: "CRA Ignore file to use(Used for SCC v1). If not provided checks repo root directory for cra-tf-validate-ignore-goals.json"
        required: false
        default: "cra-tf-validate-ignore-goals.json"
      craRuleIgnoreFile:
        type: string
        description: "CRA Ignore file to use (Used for SCC v2). If not provided checks repo root directory for cra-tf-validate-ignore-rules.json"
        required: false
        default: "cra-tf-validate-ignore-rules.json"
      craSCCv2:
        type: boolean
        description: "Use SCCv2 CRA run-cra-scc-v2.sh"
        required: false
        default: false
      accountID:
        type: string
        description: "CRA scc v2 needs the IBM Cloud Account ID as Input (Default GeDev)"
        required: false
        default: "abac0df06b644a9cabc6e44f55b3880e"
      profileID:
        type: string
        description: "CRA scc v2 needs the Pofile ID as Input. This is the profile ID you want to scan with. Note IDs are region specific ensure you use a US one (Default: US IBM Cloud for Financial Services 1.2.0)"
        required: false
        default: "4c67f813-8723-4029-8b44-848fb989899e"
      craEnvironmentVariables:
        type: string
        description: "An optional list of environment variables to set for CRA, in comma seperated format 'VAR1=value1,VAR2=value2'. This can be used to provide TF_VAR's"
        required: false
        default: ""
      GITHUB_BASE_REF:
        description: target branch merging into
        type: string
        required: true
      GITHUB_HEAD_REF:
        description: source branch coming from
        type: string
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Infrastructure_Tests:
    name: Infrastructure Test
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    container:
      image: icr.io/goldeneye_images/goldeneye-ci-image:stable
      env:
        TF_VAR_ibmcloud_api_key: ${{ secrets.IBMCLOUD_API_KEY }}
        IC_API_KEY: ${{ secrets.IBMCLOUD_API_KEY }}
        TOOLCHAIN_ID: ${{ secrets.IAC_GE_OPS_TOOLCHAIN_ID }}
        MZ_INGESTION_KEY: ${{ secrets.MZ_INGESTION_KEY }}
        TF_VAR_ibmcloud_api_key_ext: ${{ secrets.IBMCLOUD_API_KEY_GEStaging }}
        PROFILE_ID: ${{ inputs.profileID }}
        ACCOUNT_ID: ${{ inputs.accountID }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
          submodules: true
          ref: ${{ inputs.checkout_commit }}
          # Clone all branches and history. This is needed for the upgrade tests
          fetch-depth: 0

      # Workaround for https://github.com/actions/runner/issues/2033
      - name: Set ownership
        run: |
          chown -R $(id -u):$(id -g) $PWD

      # Install dependencies
      - name: Install dependencies
        run: |
          make dependency-install-darwin-linux

      # run CRA scan
      - name: CRA Scan
        if: inputs.craTarget != '' || inputs.craConfigYamlFile != ''
        run: |
          #!/bin/bash
          set -e

          # Check if YAML file is provided
          if [[ -n "${{ inputs.craConfigYamlFile }}" ]]; then
            if [[ -f "${{ inputs.craConfigYamlFile }}" ]]; then
              # Parse the YAML file and process each target
              CRA_CONFIG_CONTENT=$(cat "${{ inputs.craConfigYamlFile }}")
              # First, convert newlines to null characters, as bash's read can handle these
              TARGET_CONFIGS=$(echo "$CRA_CONFIG_CONTENT" | yq eval '.CRA_TARGETS' - | tr '\n' '\0')

              # Then, iterate through TARGET_CONFIGS line by line (null-separated)
              while IFS= read -r -d '' TARGET_CONFIG; do
                CRA_TARGET=$(echo "$TARGET_CONFIG" | yq eval '.CRA_TARGET' -)
                CRA_ENVIRONMENT_VARIABLES=$(echo "$TARGET_CONFIG" | yq eval '.CRA_ENVIRONMENT_VARIABLES' -)
                CRA_RULE_IGNORE_FILE=$(echo "$TARGET_CONFIG" | yq eval '.CRA_RULE_IGNORE_FILE' -)
                ACCOUNT_ID=$(echo "$TARGET_CONFIG" | yq eval '.ACCOUNT_ID' -)
                PROFILE_ID=$(echo "$TARGET_CONFIG" | yq eval '.PROFILE_ID' -)

                # Export environment variables if provided
                if [ -n "$CRA_ENVIRONMENT_VARIABLES" ]; then
                  IFS=',' read -ra ENV_VARS_ARRAY <<< "$CRA_ENVIRONMENT_VARIABLES"
                  for i in "${ENV_VARS_ARRAY[@]}"; do
                    # Use an array to store the variable and value
                    ENV_VAR=(${i//=/ })
                    echo "Exporting environment variable: ${ENV_VAR[0]}"
                    export "${ENV_VAR[0]}"="${ENV_VAR[1]}"
                  done
                else
                  echo "No environment variables to export for target ${CRA_TARGET}"
                fi

                # Run CRA scan for the target
                if [ -n "${CRA_TARGET}" ]; then
                  echo "CRA IGNORE FILE: ${CRA_RULE_IGNORE_FILE}"
                  ci/run-cra-scc-v2.sh "$CRA_TARGET"
                else
                  echo "No CRA target specified for this configuration!"
                fi
              done  <<< "$TARGET_CONFIGS"
            else
              echo "Provided YAML configuration file '${{ inputs.craConfigYamlFile }}' not found!"
              exit 1
            fi
          else
            export CRA_IGNORE_GOALS_FILE="$(pwd)/${{ inputs.craGoalIgnoreFile }}"
            export CRA_IGNORE_RULES_FILE="$(pwd)/${{ inputs.craRuleIgnoreFile }}"

            ENV_VARS="${{ inputs.craEnvironmentVariables }}"
            if [ -n "$ENV_VARS" ]; then
              IFS=',' read -ra ENV_VARS_ARRAY <<< "$ENV_VARS"
              for i in "${ENV_VARS_ARRAY[@]}"; do
                # Use an array to store the variable and value
                ENV_VAR=(${i//=/ })
                echo "Exporting environment variable: ${ENV_VAR[0]}"
                export "${ENV_VAR[0]}"="${ENV_VAR[1]}"
              done
            else
              echo "No input environment variables to export"
            fi

            # Install CRA plugin if not detected
            if ! ibmcloud plugin show cra; then
              ibmcloud plugin install cra -f
            fi

            # Run CRA scan for each target in the comma-separated list
            IFS=',' read -ra CRA_TARGETS_ARRAY <<< "${{ inputs.craTarget }}"
            for target in "${CRA_TARGETS_ARRAY[@]}"; do
              if ${{ inputs.craSCCv2 }}; then
                echo "CRA IGNORE FILE: ${CRA_IGNORE_RULES_FILE}"
                ci/run-cra-scc-v2.sh "$target"
              else
                echo "CRA IGNORE FILE: ${CRA_IGNORE_GOALS_FILE}"
                ci/run-cra.sh "$target"
              fi
            done
          fi


      # run unit tests
      - name: Unit Tests
        run: |
          export GITHUB_BASE_REF=${{inputs.GITHUB_BASE_REF}}
          export GITHUB_HEAD_REF=${{inputs.GITHUB_HEAD_REF}}
          make run-tests
