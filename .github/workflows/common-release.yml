name: Release

on:
  workflow_call:
    inputs:
      versionPrefix:
        required: false
        type: string
        description: "Optional prefix to add before version number"
        default: "v"

      sign:
        required: false
        type: boolean
        description: "Sign tags"
        default: true

jobs:
  Semantic_Release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container:
      image: icr.io/goldeneye_images/goldeneye-ci-image:stable
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        CATALOG_TEKTON_WEBHOOK_TOKEN: ${{ secrets.CATALOG_TEKTON_WEBHOOK_TOKEN }}
        CATALOG_TEKTON_WEBHOOK_URL: ${{ secrets.CATALOG_TEKTON_WEBHOOK_URL }}
        CATALOG_PUBLISH_APIKEY: ${{ secrets.CATALOG_PUBLISH_APIKEY }}
        CATALOG_VALIDATION_APIKEY: ${{ secrets.CATALOG_VALIDATION_APIKEY }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          submodules: true

      # Workaround for https://github.com/actions/runner/issues/2033
      - name: Set ownership
        run: |
          chown -R $(id -u):$(id -g) $PWD

      - name: Import GPG key
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.RELEASE_PRIVATE_PGP }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      # Release
      - name: Semantic Release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GIT_AUTHOR_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_AUTHOR_EMAIL: ${{ steps.import-gpg.outputs.email }}
          GIT_COMMITTER_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_COMMITTER_EMAIL: ${{ steps.import-gpg.outputs.email }}
        run: |
          if [ ! -e "./package-lock.json" ]; then ln -s /tmp/package-lock.json package-lock.json; fi
          if [ ! -d "./node_modules" ]; then ln -s /tmp/node_modules node_modules; fi
          npx semantic-release
          echo "Release complete"

      - id: versionNumber
        run: |
          echo "version=$SEMVER_VERSION"
          echo "version=$SEMVER_VERSION" >> "$GITHUB_OUTPUT"

      # Setup GPG after release      https://github.com/semantic-release/semantic-release/issues/3065
      - name: Import and configur GPG key
        if: ${{ inputs.sign == true }}
        id: import-config-gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.RELEASE_PRIVATE_PGP }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true

      - name: Sign Tag
        if: ${{ inputs.sign == true }}
        env:
          SEMVER_VERSION: ${{steps.versionNumber.outputs.version}}
        run: |
          if [ -z "$SEMVER_VERSION" ]
          then
            echo "No Release Version Set. Skip tagging"
          else
            echo "Version: ${{ inputs.versionPrefix }}${SEMVER_VERSION}"
            git tag "${{ inputs.versionPrefix }}${SEMVER_VERSION}" "${{ inputs.versionPrefix }}${SEMVER_VERSION}" -f -s -m "Sign Tag"
            export GIT_COMMITTER_DATE="$(git log -1 --format=%aD ${{ inputs.versionPrefix }}${SEMVER_VERSION})"
            git push origin "${{ inputs.versionPrefix }}${SEMVER_VERSION}" -f
          fi

      - name: Failure Alert
        if: ${{ failure() }}
        run: |
          response=$(curl -sL \
              -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${{ github.repository }}/issues \
              -d '{"title":"Release Pipeline failed","body":"For details see: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}","labels":["ci-failure"]}')
          url=$(echo "$response" | jq -r '.url')
          if [ ! -z "$url" ]; then
              echo "Issue successfully created"
              notification_text=":ibm-warning-filled: Release Pipeline failed. For details see: $url."
              if curl -s -X POST \
                      -H 'Content-type: application/json' \
                      -d '{"text":"'"$notification_text"'"}' \
                      ${{ secrets.GE_SLACK_WEBHOOK_URL }} \
                      -o /dev/null; then
                  echo "Slack message successfully created"
              else
                  echo "Slack message creation failed"
              fi
          else
              echo "Issue creation failed"
          fi
